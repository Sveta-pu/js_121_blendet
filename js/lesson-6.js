// // 'use strict';

// // function f() {
// //   return this && this.name;
// // }

// // const obj = {
// //   name: 'Obj',
// //   m: f,
// //   n() {
// //     const arrow = () => this.name;
// //     return arrow();
// //   },
// // };

// // const g = f.bind({ name: 'Bind' });

// // console.log(f()); // 1) ?
// // console.log(obj.m()); // 2) ?
// // console.log(g()); // 3) ?
// // console.log(obj.n()); // 4) ?
// // const apartment = {
// // 	rooms: 4,
// // 	floor: 2,
// // 	taxFree: false
// // };

// // const condo = Object.create(apartment);
// // condo.rooms = 3;

// // const objB = {
// //   b: 'objB prop',
// // };

// // const objA = Object.create(objB);
// // objA.a = 'objA prop';

// // console.log(objA);

// // –ß—É–¥–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è üëç
// // –£ —Ç–µ–±–µ –≤–∂–µ —î –æ–±‚Äô—î–∫—Ç chopShop —ñ–∑ –º–∞—Å–∏–≤–æ–º –∫–∞–º–µ–Ω—ñ–≤. –¢–µ–ø–µ—Ä —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), —è–∫–∏–π:

// // –ü—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É –∫–∞–º–µ–Ω—è (stoneName).

// // –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–∞–º—ñ–Ω—å —É –º–∞—Å–∏–≤—ñ stones.

// // –ü–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å: price * quantity.

// // ‚úÖ –†—ñ—à–µ–Ω–Ω—è
// // const chopShop = {
// //   stones: [
// //     { name: 'Emerald', price: 1300, quantity: 4 },
// //     { name: 'Diamond', price: 2700, quantity: 3 },
// //     { name: 'Sapphire', price: 1400, quantity: 7 },
// //     { name: 'Ruby', price: 800, quantity: 2 },
// //   ],

// //   calcTotalPrice(stoneName) {
// //     const stone = this.stones.find(stone => stone.name === stoneName);
// //     return stone ? stone.price * stone.quantity : 0;
// //   },
// // };

// // console.log(chopShop.calcTotalPrice('Emerald'));

// // üîπ –ü–æ—è—Å–Ω–µ–Ω–Ω—è

// // .find() —à—É–∫–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —É –º–∞—Å–∏–≤—ñ, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ.

// // –Ø–∫—â–æ –∫–∞–º—ñ–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ price * quantity.

// // –Ø–∫—â–æ –Ω—ñ (undefined) ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0.

// // –ö–ª–∞—Å–Ω–∞ —Ç–µ–º–∞ üëå
// // –ù–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ —É —Ç–µ–±–µ –∑–≥–∞–¥—É—é—Ç—å—Å—è —Ç—Ä–∏ –º–µ—Ç–æ–¥–∏: call, apply, bind.
// // –í—Å—ñ –≤–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —è–≤–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (this) –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó.1. –ú–µ—Ç–æ–¥ call

// // –í–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É.

// // function greet(greeting, punctuation) {
// //   console.log(`${greeting}, ${this.name}${punctuation}`);
// // }

// // const user = { name: "Alice" };

// // greet.call(user, "Hello", "!");
// // // Hello, Alice!

// // üîπ 2. –ú–µ—Ç–æ–¥ apply

// // –°—Ö–æ–∂–∏–π –Ω–∞ call, –∞–ª–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –º–∞—Å–∏–≤–æ–º.

// // greet.apply(user, ["Hi", "!!!"]);
// // // Hi, Alice!!!

// // üîπ 3. –ú–µ—Ç–æ–¥ bind

// // –ù–µ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥—Ä–∞–∑—É, –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–º this.

// // const greetAlice = greet.bind(user, "Hey");
// // greetAlice("?");
// // // Hey, Alice?

// // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
// // –ú–µ—Ç–æ–¥	–í–∏–∫–ª–∏–∫–∞—î –æ–¥—Ä–∞–∑—É?	–Ø–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∏	–©–æ –ø–æ–≤–µ—Ä—Ç–∞—î
// // call	‚úÖ –¢–∞–∫	—á–µ—Ä–µ–∑ –∫–æ–º—É	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // apply	‚úÖ –¢–∞–∫	–º–∞—Å–∏–≤–æ–º	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // bind	‚ùå –ù—ñ	—á–µ—Ä–µ–∑ –∫–æ–º—É (—è–∫ —É call)	–Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é

// // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
// // –ú–µ—Ç–æ–¥	–í–∏–∫–ª–∏–∫–∞—î –æ–¥—Ä–∞–∑—É?	–Ø–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∏	–©–æ –ø–æ–≤–µ—Ä—Ç–∞—î
// // call	‚úÖ –¢–∞–∫	—á–µ—Ä–µ–∑ –∫–æ–º—É	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // apply	‚úÖ –¢–∞–∫	–º–∞—Å–∏–≤–æ–º	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // bind	‚ùå –ù—ñ	—á–µ—Ä–µ–∑ –∫–æ–º—É (—è–∫ —É call)	–Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é

// –û–±‚Äô—î–∫—Ç-–ø—Ä–æ—Ç–æ—Ç–∏–ø
// Object.create(proto)

// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç, —á–∏–π [[Prototype]] –≤–∫–∞–∑—É—î –Ω–∞ proto.

// const animal = { legs: 4 };
// const dog = Object.create(animal); // dog.__proto__ === animal
// dog.name = "Mango";

// console.log(dog.name); // "Mango" (–≤–ª–∞—Å–Ω–∞)
// console.log(dog.legs); // 4 (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–∞ –∑ animal)

// –í–ª–∞—Å–Ω—ñ vs –Ω–µ–≤–ª–∞—Å–Ω—ñ (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ) –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ

// –í–ª–∞—Å–Ω—ñ: –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –æ–±‚Äô—î–∫—Ç—ñ.

// –ù–µ–≤–ª–∞—Å–Ω—ñ: –ø—Ä–∏—Ö–æ–¥—è—Ç—å —ñ–∑ –ª–∞–Ω—Ü—é–∂–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤.

// dog.hasOwnProperty("name"); // true
// dog.hasOwnProperty("legs"); // false
// "legs" in dog;              // true (–±–æ —î —É –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ)

// –ü–µ—Ä–µ–±—ñ—Ä –≤–ª–∞—Å–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π

// –£–Ω–∏–∫–∞–π for...in –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞ ‚Äî –≤—ñ–Ω —Ç—è–≥–Ω–µ —ñ —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ.

// // –í–∞—Ä—ñ–∞–Ω—Ç 1: —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
// for (const key in dog) {
//   if (dog.hasOwnProperty(key)) console.log(key); // –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ
// }

// // –í–∞—Ä—ñ–∞–Ω—Ç 2: —Å—É—á–∞—Å–Ω–æ –∑ for...of
// for (const [k, v] of Object.entries(dog)) {
//   console.log(k, v); // –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ
// }

// –õ–∞–Ω—Ü—é–∂–∫–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤

// –ü–æ—à—É–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –π–¥–µ –≤–≥–æ—Ä—É –ª–∞–Ω—Ü—é–∂–∫–æ–º –¥–æ Object.prototype, –ø–æ—Ç—ñ–º –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è.

// Object.getPrototypeOf(dog) === animal;        // true
// Object.getPrototypeOf(animal) === Object.prototype; // true

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ¬´—Ö—Ç–æ —á–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø¬ª
// animal.isPrototypeOf(dog); // true
// dog.isPrototypeOf(animal); // false

// –¢–∏–ø–æ–≤—ñ –ø—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ

// for...in –ø–µ—Ä–µ–±–∏—Ä–∞—î –π —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ ‚Äî —Ñ—ñ–ª—å—Ç—Ä—É–π –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Object.keys/values/entries.

// –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –æ–¥–Ω–æ–π–º–µ–Ω–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —É ¬´–Ω–∞—â–∞–¥–∫–∞¬ª –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—É (–Ω–µ –∑–º—ñ–Ω—é—î –ø—Ä–æ—Ç–æ—Ç–∏–ø).

// undefined –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ ‚Üí –∞–±–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –Ω–µ–º–∞ –Ω—ñ–¥–µ –≤ –ª–∞–Ω—Ü—é–≥—É, –∞–±–æ –≤–æ–Ω–∞ —î, –∞–ª–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è undefined. –†—ñ–∑–Ω–∏—Ü—é –ø–µ—Ä–µ–≤—ñ—Ä—è–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º in.

// –ú—ñ–Ω—ñ-–ø—Ä–∞–∫—Ç–∏–∫–∞ (—Å–ø—Ä–æ–±—É–π —É –∫–æ–Ω—Å–æ–ª—ñ)
// const base = { x: 1 };
// const a = Object.create(base);
// a.y = 2;

// // 1) –Ø–∫—ñ –∫–ª—é—á—ñ –≤–∏–≤–µ–¥–µ?
// console.log(Object.keys(a)); // ?

// // 2) –ß–∏–º –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è:
// console.log("x" in a);             // ?
// console.log(a.hasOwnProperty("x")); // ?

// // 3) –•—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø a?
// console.log(Object.getPrototypeOf(a) === base); // ?
