// // 'use strict';

// // function f() {
// //   return this && this.name;
// // }

// // const obj = {
// //   name: 'Obj',
// //   m: f,
// //   n() {
// //     const arrow = () => this.name;
// //     return arrow();
// //   },
// // };

// // const g = f.bind({ name: 'Bind' });

// // console.log(f()); // 1) ?
// // console.log(obj.m()); // 2) ?
// // console.log(g()); // 3) ?
// // console.log(obj.n()); // 4) ?
// // const apartment = {
// // 	rooms: 4,
// // 	floor: 2,
// // 	taxFree: false
// // };

// // const condo = Object.create(apartment);
// // condo.rooms = 3;

// // const objB = {
// //   b: 'objB prop',
// // };

// // const objA = Object.create(objB);
// // objA.a = 'objA prop';

// // console.log(objA);

// // –ß—É–¥–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è üëç
// // –£ —Ç–µ–±–µ –≤–∂–µ —î –æ–±‚Äô—î–∫—Ç chopShop —ñ–∑ –º–∞—Å–∏–≤–æ–º –∫–∞–º–µ–Ω—ñ–≤. –¢–µ–ø–µ—Ä —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), —è–∫–∏–π:

// // –ü—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É –∫–∞–º–µ–Ω—è (stoneName).

// // –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–∞–º—ñ–Ω—å —É –º–∞—Å–∏–≤—ñ stones.

// // –ü–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å: price * quantity.

// // ‚úÖ –†—ñ—à–µ–Ω–Ω—è
const chopShop = {
  stones: [
    { name: 'Emerald', price: 1300, quantity: 4 },
    { name: 'Diamond', price: 2700, quantity: 3 },
    { name: 'Sapphire', price: 1400, quantity: 7 },
    { name: 'Ruby', price: 800, quantity: 2 },
  ],
  calcTotalPrice(stoneName) {
    const stone = this.stones.find(stone => stone.name === stoneName);
    return stone ? stone.price * quantity : 0;
  },
};

// //   calcTotalPrice(stoneName) {
// //     const stone = this.stones.find(stone => stone.name === stoneName);
// //     return stone ? stone.price * stone.quantity : 0;
// //   },
// // };

// // console.log(chopShop.calcTotalPrice('Emerald'));

// // üîπ –ü–æ—è—Å–Ω–µ–Ω–Ω—è

// // .find() —à—É–∫–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —É –º–∞—Å–∏–≤—ñ, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ.

// // –Ø–∫—â–æ –∫–∞–º—ñ–Ω—å –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ price * quantity.

// // –Ø–∫—â–æ –Ω—ñ (undefined) ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0.

// // –ö–ª–∞—Å–Ω–∞ —Ç–µ–º–∞ üëå
// // –ù–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ —É —Ç–µ–±–µ –∑–≥–∞–¥—É—é—Ç—å—Å—è —Ç—Ä–∏ –º–µ—Ç–æ–¥–∏: call, apply, bind.
// // –í—Å—ñ –≤–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —è–≤–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (this) –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó.1. –ú–µ—Ç–æ–¥ call

// // –í–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É.

// // function greet(greeting, punctuation) {
// //   console.log(`${greeting}, ${this.name}${punctuation}`);
// // }

// // const user = { name: "Alice" };

// // greet.call(user, "Hello", "!");
// // // Hello, Alice!

// // üîπ 2. –ú–µ—Ç–æ–¥ apply

// // –°—Ö–æ–∂–∏–π –Ω–∞ call, –∞–ª–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –º–∞—Å–∏–≤–æ–º.

// // greet.apply(user, ["Hi", "!!!"]);
// // // Hi, Alice!!!

// // üîπ 3. –ú–µ—Ç–æ–¥ bind

// // –ù–µ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥—Ä–∞–∑—É, –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–º this.

// // const greetAlice = greet.bind(user, "Hey");
// // greetAlice("?");
// // // Hey, Alice?

// // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
// // –ú–µ—Ç–æ–¥	–í–∏–∫–ª–∏–∫–∞—î –æ–¥—Ä–∞–∑—É?	–Ø–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∏	–©–æ –ø–æ–≤–µ—Ä—Ç–∞—î
// // call	‚úÖ –¢–∞–∫	—á–µ—Ä–µ–∑ –∫–æ–º—É	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // apply	‚úÖ –¢–∞–∫	–º–∞—Å–∏–≤–æ–º	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // bind	‚ùå –ù—ñ	—á–µ—Ä–µ–∑ –∫–æ–º—É (—è–∫ —É call)	–Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é

// // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
// // –ú–µ—Ç–æ–¥	–í–∏–∫–ª–∏–∫–∞—î –æ–¥—Ä–∞–∑—É?	–Ø–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∏	–©–æ –ø–æ–≤–µ—Ä—Ç–∞—î
// // call	‚úÖ –¢–∞–∫	—á–µ—Ä–µ–∑ –∫–æ–º—É	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // apply	‚úÖ –¢–∞–∫	–º–∞—Å–∏–≤–æ–º	—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
// // bind	‚ùå –ù—ñ	—á–µ—Ä–µ–∑ –∫–æ–º—É (—è–∫ —É call)	–Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é

// –û–±‚Äô—î–∫—Ç-–ø—Ä–æ—Ç–æ—Ç–∏–ø
// Object.create(proto)

// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç, —á–∏–π [[Prototype]] –≤–∫–∞–∑—É—î –Ω–∞ proto.

// const animal = { legs: 4 };
// const dog = Object.create(animal); // dog.__proto__ === animal
// dog.name = "Mango";

// console.log(dog.name); // "Mango" (–≤–ª–∞—Å–Ω–∞)
// console.log(dog.legs); // 4 (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–∞ –∑ animal)

// –í–ª–∞—Å–Ω—ñ vs –Ω–µ–≤–ª–∞—Å–Ω—ñ (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ) –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ

// –í–ª–∞—Å–Ω—ñ: –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –æ–±‚Äô—î–∫—Ç—ñ.

// –ù–µ–≤–ª–∞—Å–Ω—ñ: –ø—Ä–∏—Ö–æ–¥—è—Ç—å —ñ–∑ –ª–∞–Ω—Ü—é–∂–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤.

// dog.hasOwnProperty("name"); // true
// dog.hasOwnProperty("legs"); // false
// "legs" in dog;              // true (–±–æ —î —É –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ)

// –ü–µ—Ä–µ–±—ñ—Ä –≤–ª–∞—Å–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π

// –£–Ω–∏–∫–∞–π for...in –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞ ‚Äî –≤—ñ–Ω —Ç—è–≥–Ω–µ —ñ —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ.

// // –í–∞—Ä—ñ–∞–Ω—Ç 1: —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
// for (const key in dog) {
//   if (dog.hasOwnProperty(key)) console.log(key); // –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ
// }

// // –í–∞—Ä—ñ–∞–Ω—Ç 2: —Å—É—á–∞—Å–Ω–æ –∑ for...of
// for (const [k, v] of Object.entries(dog)) {
//   console.log(k, v); // –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ
// }

// –õ–∞–Ω—Ü—é–∂–∫–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤

// –ü–æ—à—É–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –π–¥–µ –≤–≥–æ—Ä—É –ª–∞–Ω—Ü—é–∂–∫–æ–º –¥–æ Object.prototype, –ø–æ—Ç—ñ–º –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è.

// Object.getPrototypeOf(dog) === animal;        // true
// Object.getPrototypeOf(animal) === Object.prototype; // true

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ¬´—Ö—Ç–æ —á–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø¬ª
// animal.isPrototypeOf(dog); // true
// dog.isPrototypeOf(animal); // false

// –¢–∏–ø–æ–≤—ñ –ø—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ

// for...in –ø–µ—Ä–µ–±–∏—Ä–∞—î –π —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ ‚Äî —Ñ—ñ–ª—å—Ç—Ä—É–π –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Object.keys/values/entries.

// –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –æ–¥–Ω–æ–π–º–µ–Ω–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —É ¬´–Ω–∞—â–∞–¥–∫–∞¬ª –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—É (–Ω–µ –∑–º—ñ–Ω—é—î –ø—Ä–æ—Ç–æ—Ç–∏–ø).

// undefined –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ ‚Üí –∞–±–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –Ω–µ–º–∞ –Ω—ñ–¥–µ –≤ –ª–∞–Ω—Ü—é–≥—É, –∞–±–æ –≤–æ–Ω–∞ —î, –∞–ª–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è undefined. –†—ñ–∑–Ω–∏—Ü—é –ø–µ—Ä–µ–≤—ñ—Ä—è–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º in.

// –ú—ñ–Ω—ñ-–ø—Ä–∞–∫—Ç–∏–∫–∞ (—Å–ø—Ä–æ–±—É–π —É –∫–æ–Ω—Å–æ–ª—ñ)
// const base = { x: 1 };
// const a = Object.create(base);
// a.y = 2;

// // 1) –Ø–∫—ñ –∫–ª—é—á—ñ –≤–∏–≤–µ–¥–µ?
// console.log(Object.keys(a)); // ?

// // 2) –ß–∏–º –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è:
// console.log("x" in a);             // ?
// console.log(a.hasOwnProperty("x")); // ?

// // 3) –•—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø a?
// console.log(Object.getPrototypeOf(a) === base); // ?
// ***********************************************************
// ****************************************************
// üìò –ö–ª–∞—Å–∏ –≤ JavaScript
// üîπ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–ª–∞—Å—É
// class Car {}

// –ö–ª–∞—Å ‚Äî —Ü–µ ¬´—à–∞–±–ª–æ–Ω¬ª –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤.

// üîπ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
// class Car {
//   constructor(brand, model) {
//     this.brand = brand;
//     this.model = model;
//   }
// }

// –ú–µ—Ç–æ–¥ constructor –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞:

// const bmw = new Car("BMW", "X5");

// üîπ –ú–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É
// class Car {
//   start() {
//     console.log("Engine started");
//   }
// }

// –ú–µ—Ç–æ–¥–∏ –æ–ø–∏—Å—É—é—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª–∞—Å—É —ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ.

// üîπ –ü—Ä–æ—Ç–æ—Ç–∏–ø –µ–∫–∑–µ–º–ø–ª—è—Ä–∞

// –ö–æ–∂–µ–Ω –æ–±‚Äô—î–∫—Ç –º–∞—î –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ prototype —Å–≤–æ–≥–æ –∫–ª–∞—Å—É.

// –ú–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ü—å–æ–º—É –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ (–∞ –Ω–µ –¥—É–±–ª—é—é—Ç—å—Å—è –≤ –∫–æ–∂–Ω–æ–º—É –æ–±‚Äô—î–∫—Ç—ñ).

//  * –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
//  * - email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
//  * - age - –≤—ñ–∫, —á–∏—Å–ª–æ
//  * - numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
//  * - topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
//  *
//  * –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.
//  *
//  * - –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫:
//  *    User ${email} is ${age} years old and has ${numPosts} posts.
//  *
//  * - –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value
//  *    –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
//  */

// class Blogger {
//     constructor (obj) {
// this.email = obj.email,
//     }
//     getInfo(){
//         return
//     }
// }

// const alice = new Blogger ({
//     email: "alise@tooo",

// })

// –ó–∞–≤–¥–∞–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–≤—É—á–∏—Ç—å —Ç–∞–∫:

// üëâ –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±‚Äô—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email.

// –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email.

// –î–æ—Å—Ç—É–ø –¥–æ –Ω–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏.

// cclass Car {
//   #brand;
//   #model;
//   #price;
//   constructor(params) {
//     this.#brand = params.brand;
//     this.#model = params.model;
//     this.#price = params.price;
//   }

//   get brand(){
//     return this.#brand;
//   }
//   set brand (newBrand){
//     this.#brand = newBrand;
//   }

//   get model(){
//   return this.#model;
//   }
//   set model (newModel){
//     this.#model = newModel;
//   }
//    get price(){
//     return this.#price;
//   }
//   set price (newBrand){
//     this.#price = newBrand;
//   }

//   getBrand() {
//     return this.#brand;
//   }

//   changeBrand(newBrand) {
//     this.#brand = newBrand;
//   }

//   getModel() {
//     return this.#model;
//   }

//   updateModel(newModel) {
//     this.#model = newModel;
//   }

//   getPrice() {
//     return this.#price;
//   }

//   setPrice(newPrice) {
//     this.#price = newPrice;
//   }
// }

// class MyClass {
//   static b = 5;

//   constructor(value) {
//     this.a = value;
//   }
// }

// const instance = new MyClass(10);
// console.log(MyClass);

// class User {
//   static roles = {
//     admin: 'admin',
//     editor: 'editor',
//     basic: 'basic',
//   };

//   #email;
//   #role;

//   constructor(params) {
//     this.#email = params.email;
//     this.#role = params.role || User.roles.basic;
//   }

//   get role() {
//     return this.#role;
//   }

//   set role(newRole) {
//     this.#role = newRole;
//   }
// }

// const mango = new User({
//   email: 'mango@mail.com',
//   role: User.roles.admin,
// });

// console.log(mango.role); // "admin"
// mango.role = User.roles.editor;
// console.log(mango.role); // "editor"

// class User {
//   static #takenEmails = [];

//   static isEmailTaken(email) {
//     return User.#takenEmails.includes(email);
//   }

//   #email;

//   constructor(params) {
//     this.#email = params.email;
//     User.#takenEmails.push(params.email);
//   }
// }

// const mango = new User({ email: 'mango@mail.com' });

// console.log(User.isEmailTaken('poly@mail.com')); // false
// console.log(User.isEmailTaken('mango@mail.com')); // true

// class Car {
//   static #maxPrice = 50000;

//   checkPrice(price) {
//     if (price >= Car.#maxPrice) {
//       return 'Error! Price exceeds the ';
//     } else {
//       return 'Success! Price is within acceptable limits.';
//     }
//   }

//   constructor(params) {
//     this.price = params.price;
//   }
// }

// const audi = new Car({ price: 36000 });

// const bmw = new Car({ price: 64000 });

// console.log(audi.checkPrice(audi.price)); // "Success! Price is within acceptable limits"
// console.log(bmw.checkPrice(bmw.price)); // "Error! Price exceeds the maximum"

// class User {
//   #email;

//   constructor(email) {
//     this.#email = email;
//   }

//   get email() {
//     return this.#email;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// class Admin extends User {
//   static role = {
//     BASIC: 'basic',
//     SUPERUSER: 'superuser',
//   };
//   construcnor(params) {
//     super(params.emaile);
//     this.access = params.access;
//   }
// }

// const mango = new Admin({
//   email: 'mango@mail.com',
//   access: Admin.role.SUPERUSER,
// });

// console.log(mango.email); // "mango@mail.com"
// console.log(mango.access); // "superuser"

// class User {
//   #email;

//   constructor(email) {
//     this.#email = email;
//   }

//   get email() {
//     return this.#email;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// class Admin extends User {
//   static role = {
//     BASIC: 'basic',
//     SUPERUSER: 'superuser',
//   };
//   constructor(params) {
//     super(params.email);
//     this.access = params.access;
//   }
// }

// const mango = new Admin({
//   email: 'mango@mail.com',
//   access: Admin.role.SUPERUSER,
// });

// console.log(mango.email); // "mango@mail.com"
// console.log(mango.access); // "superuser"

// –£—è–≤—ñ–º–æ, —â–æ –≤–∏—â–µ —î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–ª–∞—Å—É User

// class ContentEditor extends User {
//   constructor(params) {
//     super(params.email);
//     this.posts = params.posts;
//   }

//   addPost(post) {
//     this.posts.push(post);
//   }
// }

// const editor = new ContentEditor({
//   email: 'mango@mail.com',
//   posts: [],
// });

// console.log(editor); // { #email: "mango@mail.com", posts: [], addPost: f }

// editor.addPost('post-1');
// editor.addPost('post-2');
// console.log(editor.posts); // ['post-1', 'post-2']

// –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤.
// –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –æ–±'—î–∫—Ç –∑ –≤—ñ–∫–æ–º –º–µ–Ω—à–µ 20 —Ä–æ–∫—ñ–≤.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true.

// const people = [
//  { name: 'John', age: 27 },
//  { name: 'Jane', age: 31 },
//  { name: 'Bob', age: 19 },
// ];

// –ó–∞–≤–¥–∞–Ω–Ω—è 4:
// const isYoung = people.some(elem , age) =>
// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [2, 4, 6, 8, 10].
// –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –ø–∞—Ä–Ω–∏–º. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true.

// const numbers = [2, 4, 6, 8, 10];
// const isIven  = numbers.every( number => % 2 === 0);

// –ó–∞–≤–¥–∞–Ω–Ω—è 5:

// –ó–Ω–∞–π–¥—ñ—Ç—å –ø–µ—Ä—à–µ –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ

// const numbers = [2, 1, 6, 8, 9, 10, 12];
// const notEver =

// –ó–∞–≤–¥–∞–Ω–Ω—è 6:

// –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [4, 2, 5, 1, 3]
// —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 4, 5].

// const numbersArray = [4, 2, 5, 1, 3];
// const num = numbersArray.toSorted((a, b) => a - b);
// console.log(num);

// –ó–∞–≤–¥–∞–Ω–Ω—è 7:

// –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ ["banana", "orange", "apple", "pear"]
//  —É –ø–æ—Ä—è–¥–∫—É –∞–ª—Ñ–∞–≤—ñ—Ç—É.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["apple", "banana", "orange", "pear"].

// const stringArray = ['banana', 'orange', 'apple', 'pear'];

// // const string = stringArray.toSorted((a, b) => a.localeCompare(b));
// // console.log(string);

// const newStringArray = arr => arr.toSorted((a, b) => a.localeCompare(b));
// console.log(newStringArray(arr));

// –ó–∞–≤–¥–∞–Ω–Ω—è 8:

//  –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –≤—ñ–∫–æ–º —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [{name: "Bob", age: 19}, {name: "John", age: 27}, {name: "Jane", age: 31}].

// const users = [
//   { name: 'John', age: 27 },
//   { name: 'Jane', age: 31 },
//   { name: 'Bob', age: 19 },
// ];

// // const newUsers = users.toSorted((a, b) => a.age - b.age);
// // console.log(newUsers);

// const newUsersSort = users.toSorted((a, b) => a.age - b.age);
// console.log(newUsersSort);

// –ó–∞–≤–¥–∞–Ω–Ω—è 9:

// –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤.
// –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç–∏, –≤ —è–∫–∏—Ö
// –≤—ñ–∫ –±—ñ–ª—å—à–µ 20 —Ä–æ–∫—ñ–≤.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [{name: "John", age: 27}, {name: "Jane", age: 31}]

// const user = [
//   { name: 'John', age: 27 },
//   { name: 'Jane', age: 31 },
//   { name: 'Bob', age: 19 },
// ];

// const newUsers = user.filter(obj => obj.age > 20);
// console.log(newUsers);

// // const userFoo = (arr) =>

// –ó–∞–≤–¥–∞–Ω–Ω—è 10:

// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5].
// –ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.

// const numbers = [1, 2, 3, 4, 5];

// const num = numbers.reduce((acc, elm) => (acc += elm), 0);
// console.log(num);

// const numFoo = arr => numbers.reduce((acc, elm) => (acc += elm), 0);

// console.log(numFoo(numbers));

// –ó–∞–≤–¥–∞–Ω–Ω—è 11:
// –†–æ–∑—Ä–æ–±–∏ –∫–ª–∞—Å Calculator, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ //
//  –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–¥ —á–∏—Å–ª–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—É, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏ //
//  –ª–∞–Ω—Ü—é–∂–∫–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ (method chaining). // //
//  –í–∏–º–æ–≥–∏ –¥–æ –∫–ª–∞—Å—É Calculator // - –ú–µ—Ç–æ–¥ number(value) //
// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å. //
// –ü–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º –æ–±'—î–∫—Ç (this) –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ª–∞–Ω—Ü—é–∂–∫–æ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤. //
//  - –º–µ—Ç–æ–¥ getResult, –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π. //
// –ù–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ. //
// - –º–µ—Ç–æ–¥ add - –î–æ–¥–∞—î value –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è. //
// –ü–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º –æ–±'—î–∫—Ç (this) –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ª–∞–Ω—Ü—é–∂–∫–æ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤. //
//  - –º–µ—Ç–æ–¥ substruct - –í—ñ–¥–Ω—ñ–º–∞—î value –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ–≤–µ—Ä—Ç–∞—î this.
// - –º–µ—Ç–æ–¥ divide - –î—ñ–ª–∏—Ç—å –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ value, —è–∫—â–æ value –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î 0.
// –Ø–∫—â–æ value === 0, –≤–∏–∫–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥—ñ–ª–µ–Ω–Ω—è.
// –ü–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º –æ–±'—î–∫—Ç (this) –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ª–∞–Ω—Ü—é–∂–∫–æ–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤. //
// - –º–µ—Ç–æ–¥ multiply -–ú–Ω–æ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ value.
//  –ü–æ–≤–µ—Ä—Ç–∞—î this. //
//  –û–±'—î–∫—Ç –∫–ª–∞—Å—É –º–æ–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ –ª–∞–Ω—Ü—é–∂–∫–∞ //
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: // const calc = new Calculator();

// const result = calc
// ¬† ¬†.number(10)¬† ¬†// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è 10
// ¬† ¬†.add(5)¬† ¬† ¬† ¬†// –î–æ–¥–∞—î–º–æ 5 (10 + 5 = 15)
// ¬† ¬†.subtract(3)¬† // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ 3 (15 - 3 = 12)
// ¬† ¬†.multiply(4)¬† // –ú–Ω–æ–∂–∏–º–æ –Ω–∞ 4 (12 * 4 = 48)
// ¬† ¬†.divide(2)¬† ¬† // –î—ñ–ª–∏–º–æ –Ω–∞ 2 (48 / 2 = 24)
// ¬† ¬†.getResult(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 24

// class Calculator {
// number(value) {
// this.result = value
// return this;
// }

// }

// ¬† ¬†console.log(result); // 24

// –ó–∞–≤–¥–∞–Ω–Ω—è 12:
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Client —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login email.
// –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏
// —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Ç–∞ —Å–µ—Ç—Ç–µ—Ä login email

// class Client {
//   #login;
//   #email;

//   constructor() {
//     this.#login = login;
//     this.#email = email;
//   }

//   get login() {
//     return this.#login;
//   }

//   set login(newlogin) {
//     this.#login = newlogin;
//   }

//   get email() {
//     return this.#email;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// const client = new Client();
// client.email = 'sdvjdkjv';
// client.login = 'TOOO';

//  –ó–∞–≤–¥–∞–Ω–Ω—è 13:

//  –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —É –∫–ª–∞—Å–∞—Ö!
// C—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å `Person`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
//  - `name` - —ñ–º'—è –ª—é–¥–∏–Ω–∏;
//  - `age`- –≤—ñ–∫ –ª—é–¥–∏–Ω–∏;
//  - `gender` - —Å—Ç–∞—Ç—å –ª—é–¥–∏–Ω–∏;
//  - `email`- –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –ª—é–¥–∏–Ω–∏.

// –ö—Ä—ñ–º —Ç–æ–≥–æ, –∫–ª–∞—Å `Person` –º–∞—î –º–∞—Ç–∏ –º–µ—Ç–æ–¥ `getDetails()`,
// —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ —ñ–º'—è–º, –≤—ñ–∫–æ–º, —Å—Ç–∞—Ç—Ç—é
//—Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –ª—é–¥–∏–Ω–∏.

//
// –ü–æ—Ç—ñ–º –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å `Employee`, —è–∫–∏–π —Ä–æ–∑—à–∏—Ä—é—î –∫–ª–∞—Å `Person`
//  —ñ –º—ñ—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
//  - salary - –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞;
//  - department - –≤—ñ–¥–¥—ñ–ª, –≤ —è–∫–æ–º—É –ø—Ä–∞—Ü—é—î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫.
// –ö—Ä—ñ–º —Ç–æ–≥–æ, –∫–ª–∞—Å `Employee` –º–∞—î –º–∞—Ç–∏ –º–µ—Ç–æ–¥ `getEmployeeDetails()`,
// —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ –∑–∞—Ä–ø–ª–∞—Ç–æ—é —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —Ç–∞ –≤—ñ–¥–¥—ñ–ª–æ–º,
//  –≤ —è–∫–æ–º—É –≤—ñ–Ω –ø—Ä–∞—Ü—é—î.

// class Person {
//   constructor(name, age, gender, email) {
//     this.name = name;
//     this.age = age;
//     this.gender = gender;
//     this.email = email;
//   }
//   getDetails() {
//     return {
//       name: this.name,
//       age: this.age,
//       gender: this.gender,
//       email: this.email,
//     };
//   }
// }

// class Employee extends Person {
//   constructor(name, age, gender, email, salary, department) {
//     super(name, age, gender, email);
//     this.salary = salary;
//     this.department = department;
//   }
//   getEmployeeDetails() {
//     return {
//       salary: this.salary,
//       age: this.age,
//     };
//   }
// }
// const person = new Person('Anna', 25, 'female', 'anna@example.com');
// console.log(person.getDetails());

// const g = { name, age, gender, email};
// const p = new Person(g);

// class Person {
//   constructor(name, age, gender, email) {
//     this.name = name;
//     this.age = age;
//     this.gender = gender;
//     this.email = email;
//   }
//   getDetails() {
//     return {
//       name: this.name,
//       age: this.age,
//       gender: this.gender,
//     };
//   }
// }

// class Employee extends Person {
//   constructor({ salary, departmen, ...person }) {
//     super(person);
//     this.salary = salary;
//     this.departmen = departmen;
//   }

//   getEmployeeDetails() {
//     return {
//       salary: this.salary,
//       name: this.name,
//       department: this.departmen,
//     };
//   }
// }

// const emp = new Employee({
//   name: 'Sveta',
//   departmen: 'Googol',
//   salary: 50000,
// });

// const per = new Person({
//   name: 'Gavriel',
//   age: 41,
//   gender: 'man',
//   email: 'gavriel@gmail.com',
// });

// console.log(per.getDetails());
// console.log(emp.getEmployeeDetails());
